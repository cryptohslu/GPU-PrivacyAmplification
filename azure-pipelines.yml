variables:
  ShortGitHash: ''

jobs:

- job: Build_PrivacyAmplification_On_Self_Hosted_Agent
  timeoutInMinutes: 30
  pool:
    name: PrivacyAmplificationPool

  steps:
  
  - script: |
      echo $(Build.SourceVersion)
      set gitHash=$(Build.SourceVersion)
      set shortHash=%gitHash:~0,7%
      echo %shortHash%
      echo ##vso[task.setvariable variable=ShortGitHash;]%shortHash%
    displayName: 'Get ShortGitHash Script'
  
  - task: VSBuild@1
    displayName: 'Build PrivacyAmplification'
    inputs:
      solution: 'PrivacyAmplification/PrivacyAmplification.sln'
      platform: 'x64'
      configuration: 'Release'
      
  - task: CmdLine@2
    inputs:
      script: |
       cd "PrivacyAmplification/bin/Release/"
       PrivacyAmplification.exe unitTestCalculateCorrectionFloat
      failOnStderr: true
    displayName: 'CalculateCorrectionFloat Unit Test'
    
  - task: CmdLine@2
    inputs:
      script: |
       cd "PrivacyAmplification/bin/Release/"
       PrivacyAmplification.exe unitTestSetFirstElementToZero
      failOnStderr: true
    displayName: 'SetFirstElementToZero Unit Test'
    
  - task: CmdLine@2
    inputs:
      script: |
       cd "PrivacyAmplification/bin/Release/"
       PrivacyAmplification.exe unitTestElementWiseProduct
      failOnStderr: true
    displayName: 'ElementWiseProduct Unit Test'
    
  - task: CmdLine@2
    inputs:
      script: |
       cd "PrivacyAmplification/bin/Release/"
       PrivacyAmplification.exe unitTestBinInt2float
      failOnStderr: true
    displayName: 'BinInt2float Unit Test'
    
  - task: CmdLine@2
    inputs:
      script: |
       cd "PrivacyAmplification/bin/Release/"
       PrivacyAmplification.exe unitTestToBinaryArray
      failOnStderr: true
    displayName: 'ToBinaryArray Unit Test'
    
  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        import os
        os.chdir("PrivacyAmplification/bin/Release/")
        import matplotlib.pyplot as plt
        import numpy as np
        from subprocess import Popen, PIPE
        
        d = np.zeros(shape=(2,28,10))
        process = Popen(["PrivacyAmplification.exe", "speedtest"], stdout=PIPE, universal_newlines=True)
        (output, err) = process.communicate()
        exit_code = process.wait()
        exec(output)
        
        fig, ax = plt.subplots()
        ax.plot(range(11, 28), d[0, 11:], 'o')
        ax.set(xlabel='log2(Blocksize)', ylabel='Speed [Mbit/s]',
               title='Privacy Ampification - RTX 3080 with dynamic Toeplitz seed')
        ax.grid()
        fig.savefig("PrivacyAmpification_RTX_3080_dynamic_seed.svg", format='svg', dpi=1200)
        
        fig, ax = plt.subplots()
        ax.plot(range(11, 28), d[1, 11:], 'o')
        ax.set(xlabel='log2(Blocksize)', ylabel='Speed [Mbit/s]',
               title='Privacy Ampification - RTX 3080 with static Toeplitz seed')
        ax.grid()
        fig.savefig("PrivacyAmpification_RTX_3080_static_seed.svg", format='svg', dpi=1200)
      displayName: 'Generate Stats'
    
  - task: CmdLine@2
    inputs:
      script: |
       cd "PrivacyAmplification/bin/Release/"
       gists update dfae7685e20cf3f418559f7960e33cfe ? PrivacyAmpification_RTX_3080_dynamic_seed.svg
       gists update dfae7685e20cf3f418559f7960e33cfe ? PrivacyAmpification_RTX_3080_static_seed.svg
      failOnStderr: true
    displayName: 'Upload Stats'
    
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'PrivacyAmplification/bin/Release'
      artifact: 'PrivacyAmplification_$(ShortGitHash)'
      publishLocation: 'pipeline'
