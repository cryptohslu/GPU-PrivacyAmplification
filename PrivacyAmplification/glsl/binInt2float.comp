#version 460
#extension GL_EXT_shader_explicit_arithmetic_types: enable

shared uint32_t binInShared[32];

uint32_t intTobinMask_dev[32] =
uint32_t[](
	2147483648,	//0b10000000000000000000000000000000
	1073741824,	//0b01000000000000000000000000000000
	536870912,	//0b00100000000000000000000000000000
	268435456,	//0b00010000000000000000000000000000
	134217728,	//0b00001000000000000000000000000000
	67108864,	//0b00000100000000000000000000000000
	33554432,	//0b00000010000000000000000000000000
	16777216,	//0b00000001000000000000000000000000
	8388608,	//0b00000000100000000000000000000000
	4194304,	//0b00000000010000000000000000000000
	2097152,	//0b00000000001000000000000000000000
	1048576,	//0b00000000000100000000000000000000
	524288,		//0b00000000000010000000000000000000
	262144,		//0b00000000000001000000000000000000
	131072,		//0b00000000000000100000000000000000
	65536,		//0b00000000000000010000000000000000
	32768,		//0b00000000000000001000000000000000
	16384,		//0b00000000000000000100000000000000
	8192,		//0b00000000000000000010000000000000
	4096,		//0b00000000000000000001000000000000
	2048,		//0b00000000000000000000100000000000
	1024,		//0b00000000000000000000010000000000
	512,		//0b00000000000000000000001000000000
	256,		//0b00000000000000000000000100000000
	128,		//0b00000000000000000000000010000000
	64,			//0b00000000000000000000000001000000
	32,			//0b00000000000000000000000000100000
	16,			//0b00000000000000000000000000010000
	8,			//0b00000000000000000000000000001000
	4,			//0b00000000000000000000000000000100
	2,			//0b00000000000000000000000000000010
	1			//0b00000000000000000000000000000001
);


layout( local_size_x_id = 0 ) in;
layout( constant_id = 1 ) const float16_t h0_local = 0.0HF;
layout(set = 0, binding = 0) readonly buffer A { uint16_t binIn[]; };
layout(set = 0, binding = 1) writeonly buffer B { float16_t realOut[]; };
layout(set = 0, binding = 2) buffer C { uint count_one_global[]; };
layout(set = 0, binding = 3) readonly buffer D { float16_t h1_reduced_local[]; };

void main(void)
{
	uint32_t block = gl_WorkGroupID.x;
	uint32_t idx = gl_LocalInvocationID.x;
	uint32_t maskToUse;
	uint32_t inPos;
	uint32_t outPos;
	maskToUse = idx % 32;
	inPos = idx / 32;
	outPos = 1024 * block + idx;

	if (idx < 32) {
		binInShared[idx] = binIn[32 * block + idx];
	}
	barrier();
	
	if ((binInShared[inPos] & intTobinMask_dev[maskToUse]) == 0) {
		realOut[outPos] = h0_local;
	}
	else
	{
		atomicAdd(count_one_global[0], 1);
		realOut[outPos] = h1_reduced_local[0];
	}
}
